# -*- coding: utf-8 -*-
"""Copy of simple_linear_regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14sMyzA8kWa1r0bdMgF5XuYkWy_XQXqol

# Simple Linear Regression

## Importing the libraries
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

"""## Importing the dataset"""

data = pd.read_csv("Salary_Data.csv")
X = data.iloc[:, :-1].values
Y = data.iloc[:, -1].values

print(X)

print(Y)

"""## Splitting the dataset into the Training set and Test set"""

from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state = 1)

print(X_train)

print(X_test)

print(Y_train)

print(Y_test)

"""## Training the Simple Linear Regression model on the Training set"""

# The LinearRegression class in Scikit-learn is an implementation of linear 
# regression. It allows you to create a linear regression model object that can 
# be trained on data and used to make predictions
from sklearn.linear_model import LinearRegression

# creates an instance of the LinearRegression class from the linear_model 
# module in Scikit-learn
regressor = LinearRegression()

# fits the linear regression model to the training data
regressor.fit(X_train, Y_train)

"""## Predicting the Test set results"""

# used to predict the dependent variable values (or target variable) for the 
# test data X_test using the trained linear regression model stored in the 
# regressor object
Y_pred = regressor.predict(X_test)

"""## Visualising the Training set results"""

plt.scatter(X_train, Y_train, color = 'red')
plt.plot(X_train, regressor.predict(X_train), color = 'blue')
plt.title('Salary vs Experience (Training set)')
plt.xlabel('Years of experience')
plt.ylabel('Salary')
plt.show()

"""## Visualising the Test set results"""

plt.scatter(X_test, Y_test, color = 'red')
plt.plot(X_test, regressor.predict(X_test))
plt.title('Salary vs Experience (Test set)')
plt.xlabel('Years of exprience')
plt.ylabel('Salary')
plt.show()
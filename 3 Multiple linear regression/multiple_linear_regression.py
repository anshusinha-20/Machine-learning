# -*- coding: utf-8 -*-
"""Multiple_linear_regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lci_xSOTn2FfUOvzWm-drr67TJFjE1G4

# Multiple Linear Regression

## Importing the libraries
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

"""## Importing the dataset"""

data = pd.read_csv("50_Startups.csv")
X = data.iloc[:, :-1].values
Y = data.iloc[:, -1].values

print(X)

print(Y)

"""## Encoding categorical data"""

from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
ct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [3])], remainder='passthrough')
X = np.array(ct.fit_transform(X))

print(X)

"""## Splitting the dataset into the Training set and Test set"""

from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state = 1)

print(X_train)

print(X_test)

print(Y_train)

print(Y_test)

"""## Training the Multiple Linear Regression model on the Training set"""

from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(X_train, Y_train)

"""## Predicting the Test set results"""

# used to make predictions on the test data using a regression model
Y_pred = regressor.predict(X_test)

# sets the precision of floating-point numbers when printing arrays using NumPy
np.set_printoptions(precision = 2)

# concatenates two arrays vertically and then prints the resulting 
# concatenated array
print(np.concatenate(
    (
        Y_pred.reshape(len(Y_pred), 1), 
        Y_test.reshape(len(Y_test), 1)
    ), 1
 )
)